@startuml
class Sac{
  - nb : int
  - max : int
  - jetons : Jeton[] 
}

class Tirage{
  - niveau : int
  - nb : int
  - max : int
  - cartes : Cartes*[max] 
  - pioche: Pioche*


}

class Plateau{
  - nb : int
  - max : int
  - jetons : Jeton*[][] 
  - sac : Sac*
}


class Jeton{

  -id : int

}

class Jeton_gemme{
  
  -type : enum <bleu,rouge,vert,blanc,noir> 
}

class Jeton_or{
  
}

class Jeton_perle{
  
}


class Privilege{
  -id : int
}

class Carte{
  -capacite: capacite {nullable}
  -points_prestige: int {nullable}
}

class Carte_joaillerie{
  - cout_blanc: int
  - cout_bleu: int
  - cout_vert: int
  - cout_rouge: int
  - cout_noir: int
  - cout_perle: int
  - niveau : int
  - nb_couronnes: int [0,3]
  - bonus_couleur: enum <bleu, blanc, rouge, vert, noir, multiple>
  - bonus_nombre: int [0,2]
  - est_reservee : bool
}

class Carte_royale{
  
}



class Joueur{
  - nom : str
  - nb_points : int 
  - nb_courones : int 
  - nb_cartes_j : int 
  - nb_cartes_r : int 
  - nb_privileges : int
  - max_nb_privileges : int  
  - max_nb_jetons : int  
  - max_nb_cartes_r : int 
  - cartes_j : Carte_joaillerie*[] 
  - cartes_r : Carte_royale*[] 
  - jetons : Jeton[] 
  - privileges : Privilege*[] 
}
  

class Jeu{
  - est_termine : bool
  - est_contre_AI : bool
  - qui_joue : Joueur
  - opponent : Joueur
}

class Pioche{
  - niveau : int
  - nb : int
  - max : int
  - cartes : Cartes*[max]
  
}
  
  Sac  o-- "0..*"Jeton : sont présents dans >
  
  Plateau o-- "0..*" Jeton : sont sur >
  
  
  Joueur o--l "0..3" Privilege : détienir >
  Joueur o-- "0..3" Carte_joaillerie : réserver >
  Joueur o-- "0..*" Carte_joaillerie : posséder >
  Joueur o-- "0..10" Jeton : posséder >
  Joueur o-- "0..2" Carte_royale : posséder >
  
  Pioche "1" -- "*" Carte_joaillerie : contenir >

  Tirage "1" --lo Carte_joaillerie : contenir <

  Joueur --* Jeu : composer >
  Jeu *-- "1" Plateau : contenir >
  Jeu *--r "1"Sac : contenir >
  Jeu *-- "67" Carte : contenir >
  Jeu *-- "0..3" Privilege : contenir >
  Jeu *-- "1..*" Jeton : contenir >
  Carte_joaillerie --^ Carte
  Carte_royale --^ Carte
  
  
  Jeton_or --u^ Jeton
  Jeton_gemme--u^ Jeton
  Jeton_perle--u^ Jeton

  Jeton : str getId() const
  Jeton : bool getDispo() const

  Joueur : int getPoints() const
  Joueur : int setPoints()
  Joueur : int getCouronnes() const
  Joueur : int setCouronnes()
  Joueur : Carte_joaillerie* getCartesJ() const
  Joueur : Carte_royale* getCartesR() const
  Joueur : void acheterCarte() const
  Joueur : void mettreJetonDansSac()
  Joueur : void printCartesJ() const
  Joueur : void printCartesR() const
  Joueur : void piocherJeton() const
  Joueur : void prendrePrivilege()
  Joueur : int getPrivilege()
  Joueur : void obtenirCarteRoyale() const
  
  Carte : Capacite getCapacite() const
  Carte : int getPrestige() const
  Carte : void getCarte() const
  
  Carte_joaillerie : int getCoutBlanc() const
  Carte_joaillerie : int getCoutVert() const
  Carte_joaillerie : int getCoutRouge() const
  Carte_joaillerie : int getCoutNoir() const
  Carte_joaillerie : int getCoutPerle() const 
  Carte_joaillerie : void setCouts()
  Carte_joaillerie : int getCouronnes() const
  Carte_joaillerie : bonus_couleur getBonusCouleur() const
  Carte_joaillerie : int getBonusNombre() const
  
  
  Jeu : Joueur& getTour() const
  Jeu : void tourSuivant()
  
  Jeton_gemme : enum getCouleur() const
  Jeton_gemme : void SetCouleur() const
  
  
  Plateau : void remplir_sac()
  
  Tirage : void piocher()
  Tirage : Tirage& getTirage() const
@enduml
