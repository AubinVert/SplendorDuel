@startuml
class Sac{
  int nb
  int max
  Jeton[] jetons
}

class Tirages{
}

class Tirage1{
  - Niveau1[5] cartes
  - int nb
  - int max
}

class Tirage2{
  - Niveau2[4] cartes
  - int nb
  - int max
}
class Tirage3{
  - Niveau3[3] cartes
  - int nb
  - int max
}


class Plateau{
  - int nb
  - int max
  - Jetons[] jetons
}


class Jetons{

  -int id


}

class Jetons_gemmes{
  
  -enum type <bleu,rouge,vert,blanc,noir> 
}

class Jetons_or{
  
  
  
}

class Jetons_perles{
  
}


class Privileges{
  -int id
}

class Cartes{
  -capacite: capacite {nullable}
  -point_prestige: int {nullable}
}

class Cartes_joaillerie{
  -cout_blanc: int
  -cout_bleu: int
  -cout_vert: int
  -cout_rouge: int
  -cout_noir: int
  -cout_perle: int
  -nb_couronnes: int [0,3]
  -bonus_couleur: enum <bleu, blanc, rouge, vert, noir>
  -bonus_nombre: int [0,2]
}


class Niveau1{
}

class Niveau2{
}
class Niveau3{
}

class Cartes_royales{
  

  
}



class Joueur{
  -str nom
  -int nb_points 
  -int nb_courones
  -int nb_cartes_j
  -int max_nb_cartes
  -int nb_cartes_r
  -int max_nb_cartes_r
  -Cartes_joaillerie[] main
  -Cartes_royales[] cartes
  -Jetons[] jetons
  -Privilege[] privilegs[]
}
  
  

class Jeu{
  +bool termine
  -bool contre_AI
  +bool ended
  -Joueur tour
}

class Pioche{
  
}
class Pioche1{
  - int nb
  - int max
  - Niveau1[] cartes
}
class Pioche2{
  - int nb
  - int max
  - Niveau2[] cartes
}
class Pioche3{
  - int nb
  - int max
  
  - Niveau3[] cartes
}
  
  Sac  o-- "0..*"Jetons : sont présents dans
  Plateau o-- "0..*" Jetons : sont sur
  
  Joueur o-- "0..3" Privileges : détient
  Joueur o-- "0..3" Cartes_joaillerie : réserver
  Joueur o-- "0..*" Cartes_joaillerie : posséder
  Joueur o-- "0..10" Jetons : posséder
  Joueur o-- "0..2" Cartes_royales : posséder 
  
  Pioche1 "1" -- "*" Niveau1 : contient
  Pioche2 "1" -- "*" Niveau2 : contient
  Pioche3 "1" -- "*" Niveau3 : contient
  

  Tirages ^-- Tirage1
  Tirages ^-- Tirage2
  Tirages ^-- Tirage3

  Tirage1 "5" --o  Niveau1
  Tirage2 "4" --o  Niveau2
  Tirage3 "3"--o Niveau3


  Joueur --* Jeu 
  Jeu *-- "1" Plateau 
  Jeu *-- "1"Sac
  Jeu *-- "67" Cartes : contenir
  Jeu *-- "0..3" Privileges 
  Jeu *-- "1..*" Jetons : contenir
  Cartes_joaillerie --^ Cartes
  Cartes_joaillerie ^-- Niveau1
  Cartes_joaillerie ^-- Niveau2
  Cartes_joaillerie ^-- Niveau3
  Cartes_royales --^ Cartes
  Pioche ^-- Pioche1
  Pioche ^-- Pioche2
  Pioche ^-- Pioche3
  
  
  Jetons_or --^ Jetons
  Jetons_gemmes --^ Jetons
  Jetons_perles --^ Jetons

  Jetons : str getId()const
  Jetons : bool getDispo()const
  Joueur : int getPoints()const
  Joueur : int setPoints()
  Joueur : int getCouronnes()const
  Joueur : int setCouronnes()
  Joueur : Cartes* getMain()const
  Joueur : acheterCarte()const
  Joueur : mettreJetonsDansSac()
  Joueur : printMain()const
  Joueur : printCartes()const
  Joueur : piocherJetons()const
  Joueur : void prendrePrivilege()
  Joueur : int getPrivileges()
  Joueur : obtenirCarteRoyale()const
  
  Cartes : Capacite getCapacite()const
  Cartes : int getPrestige()const
  Cartes_joaillerie : int getCouts()const
  Cartes_joaillerie : void setCouts()
  Cartes_joaillerie : int[0,3] getCouronnes()const
  Cartes_joaillerie : enum getBonusCouleur()const
  Cartes_joaillerie : int[0,2] getBonusNombre()const
  Cartes_joaillerie : void print()const
  Cartes_royales : void print()const
  Jeu : Joueur& getTour()const
  Jeu : tourSuivant()
  Jetons_gemmes : enum getCouleur()const
  Plateau : remplir(Sac &sac)
  Tirage1 : void piocher(Pioche1 &p1)
  Tirage1 : Tirage1& getTirage()const
  Tirage2 : void piocher(Pioche2 &p2)
  Tirage2 : Tirage2& getTirage()const
  Tirage3 : void piocher(Pioche3 &p3)
  Tirage3 : Tirage3& getTirage()const
  


@enduml
