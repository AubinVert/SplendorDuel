@startuml
class Sac{
  - nb : int
  - max : int
  - jetons : const Jeton*[]
  - handler_sac : static Handler_sac
}

class Tirage{
  - nb_max_tirages : static const int;
  - nb_tirages : static int;
  - niveau : const int
  - nb_cartes : int
  - max_cartse : int
  - cartes : vector<const Cartes_joaillerie*>
  - pioche : Pioche&
}

class Plateau{
  - nb : int
  - max : int
  - jetons : const Jeton*[]
  - handler_plateau : static Handler_plateau
}

class Jeton{
  -id : int
  -couleur : enum <bleu,rouge,vert,blanc,noir,or,perle>
  -nb_perle : static int
  -max_perle : static const int
  -nb_or : static int
  -max_or : static const int
  -nb_vert : static int
  -max_vert : static const int
  -nb_rouge : static int
  -max_rouge : static const int
  -nb_bleu : static int
  -max_bleu : static const int
  -nb_blanc : static int
  -max_blanc : static const int
  -nb_noir : static int
  -max_noir : static const int
}

class Privilege{
  - id : const int
  - instanceCount : static int
  - maxInstances : static const int
}

class Carte{
  -capacite: const Capacite {nullable}
  -points_prestige: const int {nullable}
}

class Carte_joaillerie{
  - cout_blanc: const int
  - cout_bleu: const int
  - cout_vert: const int
  - cout_rouge: const int
  - cout_noir: const int
  - cout_perle: const int
  - niveau : const int
  - nb_couronnes: const int [0,3]
  - bonus_couleur: const enum <bleu, blanc, rouge, vert, noir, multiple>
  - bonus_nombre: const int [0,2]
}

class Carte_royale{
}

class Joueur{
  - nom : str
  - nb_points : int 
  - nb_courones : int 
  - nb_cartes_j : int 
  - nb_cartes_r : int 
  - nb_privileges : int
  - max_nb_privileges : int  
  - max_nb_jetons : int  
  - max_nb_cartes_r : int 
  - cartes_j : Carte_joaillerie*[] 
  - cartes_r : Carte_royale*[] 
  - jetons : Jeton[] 
  - privileges : Privilege*[] 
}
  
class Jeu{
  - est_termine : bool
  - est_contre_AI : bool
  - qui_joue : Joueur
  - opponent : Joueur
}

class Pioche{
  - niveau : const int
  - nb_pioches : static int
  - max_pioches : static const int
  - pioche : vector<const Cartes_joaillerie*>
}

class SplendorException{
    - info : std::string
}
  

  Sac  o-- "0..*"Jeton : sont présents dans >
  
  Plateau o-- "0..*" Jeton : sont sur >
  
  Joueur o--l "0..3" Privilege : détienir >
  Joueur o-- "0..3" Carte_joaillerie : réserver >
  Joueur o-- "0..*" Carte_joaillerie : posséder >
  Joueur o-- "0..10" Jeton : posséder >
  Joueur o-- "0..2" Carte_royale : posséder >
  
  Pioche "1" -- "*" Carte_joaillerie : contenir >

  Tirage "1" --lo Carte_joaillerie : contenir <

  Joueur --* Jeu : composer >
  Jeu *-- "1" Plateau : contenir >
  Jeu *--r "1"Sac : contenir >
  Jeu *-- "67" Carte : contenir >
  Jeu *-- "0..3" Privilege : contenir >
  Jeu *-- "1..*" Jeton : contenir >
  Carte_joaillerie --^ Carte
  Carte_royale --^ Carte



  Jeton : const int get_id() const
  Jeton : static int get_nb_max_jetons()
  Jeton : \~Jeton()
  Jeton : Jeton(id:int, couleur:enum)

  Sac : Sac()
  Sac : \~Sac()
  Sac : static Sac& get_sac()
  Sac : static void libere_sac()
  Sac : void init_sac()

  Privilege : - Privilege()
  Privilege : const int get_id() const
  Privilege : static int getCount()
  Privilege : static Privilege* GetInstance()

  Joueur : int getPoints() const
  Joueur : int setPoints()
  Joueur : int getCouronnes() const
  Joueur : int setCouronnes()
  Joueur : Carte_joaillerie* getCartesJ() const
  Joueur : Carte_royale* getCartesR() const
  Joueur : void acheterCarte() const
  Joueur : void mettreJetonDansSac()
  Joueur : void printCartesJ() const
  Joueur : void printCartesR() const
  Joueur : void piocherJeton() const
  Joueur : void prendrePrivilege()
  Joueur : int getPrivilege()
  Joueur : void obtenirCarteRoyale() const
  
  Carte : const Capacite& getCapacite() const
  Carte : int getPrestige() const
  Carte : \~Carte()
  Carte : Carte(capacite : Capacite, points_prestige : int)
  
  Carte_joaillerie : const int getCoutBlanc() const
  Carte_joaillerie : const int getCoutVert() const
  Carte_joaillerie : const int getCoutRouge() const
  Carte_joaillerie : const int getCoutNoir() const
  Carte_joaillerie : const int getCoutPerle() const
  Carte_joaillerie : const int getNiveau() const
  Carte_joaillerie : const int get_nb_couronnes() const
  Carte_joaillerie : const Bonus_couleur& get_bonus() const
  Carte_joaillerie : const int get_nb_bonus() const

  Carte_royale : Carte_royale(capacite : Capacite, points_prestige : int)
  
  Jeu : Joueur& getTour() const
  Jeu : void tourSuivant()
  
  Plateau : Plateau(max:int)
  Plateau : \~Plateau()
  Plateau : static Plateau& get_plateau()
  Plateau : static void libere_plateau()
  Plateau : const Jeton* get_plateau_i(i:int) const
  Plateau : void set_plateau_i(i:int, jet: const Jeton*)
  Plateau : const Jeton* get_droite_i(i:int) const
  Plateau : const Jeton* get_gauche_i(i:int) const
  Plateau : const Jeton* get_dessous_i(i:int) const
  Plateau : const Jeton* get_dessus_i(i:int) const
  Plateau : void print_tab() const
  
  Tirage : Tirage(niv : int, max : int, p : Pioche&)
  Tirage : \~Tirage()
  Tirage : void remplirTirage()
  Tirage : Pioche& getPioche() const
  Tirage : vector<const Carte_joaillerie*> getTirage() const
  Tirage : const int getNiveau() const
  Tirage : const int getNbCartes() const

  Pioche : Pioche(niv : int)
  Pioche : \~Pioche()
  Pioche : bool est_vide()
  Pioche : const int getNiveau() const
  Pioche : vector<const Carte_joaillerie*> getPioche() const
  Pioche : static int getNbPioches()
  Pioche : static void remplirPioche(p1 : Pioche*, p2 : Pioche*, p3 : Pioche*, cartes : vector<const Carte_joaillerie*>&)

  SplendorException : SplendorException(str const std::string&)
  SplendorException : std::string getInfos() const
@enduml
